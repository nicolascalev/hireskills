// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String           @id
  username                      String           @unique
  createdAt                     DateTime         @default(now()) @map(name: "created_at")
  fullName                      String           @map("full_name")
  company                       String?
  role                          String?
  email                         String           @unique
  avatarUrl                     String?          @map("avatar_url") @db.Text
  location                      String?
  startedCoding                 DateTime?        @map("started_coding")
  startedProfessionalExperience DateTime?        @map("started_professional_experience")
  portfolioUrl                  String?          @map("portfolio_url")
  linkedinUsername              String?          @map("linkedin_username")
  githubUsername                String?          @map("github_username")
  leetcodeUsername              String?          @map("leetcode_username")
  summary                       String?          @db.Text
  jobSeeking                    Boolean          @default(false) @map("job_seeking")
  displayJobSeeking             Boolean          @default(false) @map("display_job_seeking")
  displayGithubActivity         Boolean          @default(false) @map("display_github_activity")
  displayEmail                  Boolean          @default(false) @map("display_email")
  displayPublicResume           Boolean          @default(false) @map("display_public_resume")
  displayActiveOpenSource       Boolean          @default(false) @map("display_active_open_source")
  isSpotlightParticipant        Boolean          @default(false) @map("is_spotlight_participant")
  resumes                       Resume[]
  defaultResumeId               String?          @map("default_resume_id")
  career                        Json
  tools                         Tool[]
  skills                        Skill[]
  projects                      Project[]
  projectsLiked                 ProjectLike[]
  postedComments                ProjectComment[]
  joinedSpotlights              Spotlight[]      @relation("SpotlightToUser")

  @@map("users")
}

model Resume {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now()) @map(name: "created_at")
  url              String   @db.Text
  key              String   @db.Text
  originalFilename String   @map("original_filename")
  userId           String   @map("user_id")
  user             User     @relation(fields: [userId], references: [id])

  @@map("resumes")
}

model Tool {
  name     String    @id
  users    User[]
  projects Project[]

  @@map("tools")
}

model Skill {
  name     String    @id
  users    User[]
  projects Project[]

  @@map("skills")
}

enum LEVEL {
  basic
  intermediate
  advanced
}

model Project {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now()) @map(name: "created_at")
  label            String
  publishDate      DateTime         @map("publish_date")
  timeSpent        String           @map("time_spent")
  url              String?
  codeRepository   String?          @map("code_repository")
  level            LEVEL
  isPublic         Boolean          @default(true) @map("is_public")
  isUsedByPeople   Boolean          @default(false) @map("is_used_by_people")
  isVerified       Boolean          @default(false) @map("is_verified")
  summary          String
  problem          String?          @db.Text
  solution         String?          @db.Text
  challengeExample String?          @map("challenge_example") @db.Text
  tools            Tool[]
  skills           Skill[]
  developerId      String           @map("developer_id")
  developer        User             @relation(fields: [developerId], references: [id])
  likes            ProjectLike[]
  likeCount        Int              @default(0) @map("like_count")
  comments         ProjectComment[]

  @@map("projects")
}

model ProjectLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("project_likes")
}

model ProjectComment {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now()) @map(name: "created_at")
  projectId   String           @map("project_id")
  userId      String           @map("user_id")
  content     String           @db.Text
  project     Project          @relation(fields: [projectId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  replies     ProjectComment[] @relation("ProjectCommentToProjectComment")
  repliedToId String?          @map("replied_to_id")
  repliedTo   ProjectComment?  @relation("ProjectCommentToProjectComment", fields: [repliedToId], references: [id])

  @@map("project_comments")
}

model Spotlight {
  id           String   @id @default(uuid())
  startsAt     DateTime @map("starts_at")
  finishesAt   DateTime @map("finishes_at")
  participants User[]   @relation("SpotlightToUser")

  @@map("spotlights")
}
